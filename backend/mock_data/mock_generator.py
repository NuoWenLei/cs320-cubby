from typing import List, Dict
import numpy as np
from utils.embeddingHelper import load_word_index

class MockUserGenerator:

	def __init__(self, question_order: List[str], max_words_per_answer: int = 3):
		self.question_order = question_order
		self.num_questions = len(question_order)
		self.max_words_per_answer = max_words_per_answer
		self.word_list = np.array(list(load_word_index().keys()))

	def get_random_words(self, num_words: int) -> List[str]:
		"""
		Creates a list of n random words where n is specified by the parameter "num_words".

		Args:
		- num_words: int, number of random words to generate
		- self properties
			- word_list: np.ndarray, array of all possible words to generate

		Returns:
		- List[str], list of generated random words
		"""
		return np.random.choice(self.word_list, size = num_words, replace = False).tolist()
	
	def get_random_answer(self) -> str:
		"""
		Creates a random answer, which consists of some number of words between 1 and the property "self.max_words_per_answer".

		Args:
		- self properties
			- max_words_per_answer: int, maximum number of words to be generated per answer
		
		Returns:
		- str, a random answer where spaces join the generated random words.
		"""
		num_words = int(np.random.random() * self.max_words_per_answer) + 1
		return " ".join(self.get_random_words(num_words))
	
	def generate_sample(self, with_id: bool = False) -> Dict[str, object]:
		"""
		Generates a random user sample.

		Args:
		- self properties
			- max_words_per_answer: int, maximum number of words to be generated per answer
			- question_order: List[str], order of questions to generate answers for
		
		Returns:
		- Dict[str, object], a map that represents a User object without the _id (which will be generated by Firebase)
		"""
		num_words_name = int(np.random.random() * self.max_words_per_answer) + 1
		random_name_words = self.get_random_words(num_words_name)
		random_id = "_".join(self.get_random_words(15))
		qa_map = {}
		for q in self.question_order:
			qa_map[q] = self.get_random_answer()

		sample = {
			"name": " ".join(random_name_words),
			"email": f'{"_".join(random_name_words)}@brown.edu',
			"questions": qa_map
		}

		if with_id:
			sample["_id"] = random_id

		return sample

	def generate_multiple_samples(self, num_samples: int, with_id: bool = False) -> List[Dict[str, object]]:
		"""
		Generates n random user samples where n is specified by the parameter "num_samples".

		Args:
		- num_samples: int, number of samples to generate

		Returns:
		- List[Dict[str, object]], list of user sample maps
		"""
		return [self.generate_sample(with_id=with_id) for _ in range(num_samples)]